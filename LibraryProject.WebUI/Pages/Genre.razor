@page "/genre"
@using LibraryProject.Business.Dto.Genres
@using LibraryProject.WebUI.Models
@using LibraryProject.WebUI.Services
@using System.Threading

<h3>Genre Dashboard</h3>
<Button Color="Color.Success" Clicked="@ShowModal">New</Button>

<Modal @ref="modalRef" Closing="@OnModalClosing">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>Closing modal</ModalTitle>
        </ModalHeader>
        <ModalBody>
            <Validations Mode="ValidationMode.Auto" Model="@genreCreated" StatusChanged="@OnStatusChanged">
                <Validation>
                    <Field>
                        <FieldLabel>Genre name :</FieldLabel>
                        <FieldBody>
                            <TextEdit @bind-Text="@genreCreated.Name" Placeholder="Enter genre name">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@CloseModal">Cancel</Button>
            <Button Color="Color.Primary" Clicked="@OnCreate" Disabled="@SaveDisabled">Save</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
<Table Hoverable="true">
    <TableHeader>
        <TableRow>
            <TableHeaderCell>#</TableHeaderCell>
            <TableHeaderCell>Name</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        @foreach (var genre in genres)
        {
            <TableRow>
                <TableRowHeader>@genre.Id</TableRowHeader>
                <TableRowCell>@genre.Name</TableRowCell>
                <Button Clicked="@(_ => OnDelete(@genre.Id))">
                    <Icon Name="IconName.Delete" />
                </Button>

            </TableRow>
        }
    </TableBody>
</Table>

@code {

    [Inject]
    public GenreService serviceGenre { get; set; }
    [Inject]
    public SnackBarService ServiceSnack { get; set; }

    List<GenreDto> genres = new();
    GenreForm genreCreated = new();

    private Modal modalRef;
    private bool cancelClose;
    private bool SaveDisabled = true;

    protected override async Task OnInitializedAsync()
    {
        genres = await serviceGenre.GetGenresAsync();
        await base.OnInitializedAsync();
    }

    private async Task OnDelete(int id)
    {
        await serviceGenre.DeleteGenre(id);
        genres = await serviceGenre.GetGenresAsync();
    }

    private void EnableCard(bool enable)
    {
        enable = true;
    }

    private Task ShowModal()
    {
        SaveDisabled = true;
        genreCreated = new();
        return modalRef.Show();
    }

    private Task CloseModal()
    {
        cancelClose = false;
        return modalRef.Hide();
    }

    private Task OnModalClosing(ModalClosingEventArgs e)
    {
        // just set Cancel to prevent modal from closing
        e.Cancel = cancelClose
            || e.CloseReason != CloseReason.UserClosing;

        return Task.CompletedTask;
    }

    private async Task OnCreate()
    {
        GenreFormCreateDto genreFormCreateDto = new()
            {
                Name = genreCreated.Name
            };
        var genre = await serviceGenre.CreateGenre(genreFormCreateDto);
        genres = await serviceGenre.GetGenresAsync();

        if(genre != null)
        {
            ServiceSnack.SnackbarStack.PushAsync("Genre created with success", Blazorise.Snackbar.SnackbarColor.Success);
        }
        await modalRef.Hide();
    }

    Task OnStatusChanged(ValidationsStatusChangedEventArgs eventArgs )
    {
        SaveDisabled = eventArgs.Status != ValidationStatus.Success;
        return Task.CompletedTask;
    }
}
