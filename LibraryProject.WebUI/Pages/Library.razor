@page "/library"
@using Blazorise.DataGrid
@using LibraryProject.Business.Dto.Books
@using LibraryProject.Business.Dto.Genres
@using LibraryProject.WebUI.Services
@using Blazorise.RichTextEdit

<h3>Library</h3>

<div class="row">
    <Fields>
        <!-- Name Filter -->
        <div class="col-md-3">
            <Field>
                <FieldLabel>Book title :</FieldLabel>
                <FieldBody>
                    <TextEdit @bind-Text="@TitleFilter" Placeholder="Title filter"></TextEdit>
                </FieldBody>
            </Field>
        </div>
        <!-- Author name filter Filter -->
        <div class="col-md-3">
            <Field>
                <FieldLabel>Author name :</FieldLabel>
                <FieldBody>
                    <TextEdit @bind-Text="@AuthorNameFilter" Placeholder="Author name filter"></TextEdit>
                </FieldBody>
            </Field>
        </div>
        <!-- Genre multiple selector -->
        <div class="col-md-3">
            <Field>
                <FieldLabel>Genre :</FieldLabel>
                <FieldBody>
                     <Select TValue="int?" SelectedValue="@GenreIdFilter">
                        <SelectItem Value="0">All</SelectItem>
                        @foreach (var item in genres)
                        {
                            <SelectItem Value="@item.Id">@item.Name</SelectItem>
                        }
                    </Select>
                </FieldBody>
            </Field>
        </div>
    </Fields>
</div>

<!-- Table -->
<DataGrid TItem="BookDto"
          Data="@PaginationResult.Books"
          @bind-SelectedRow="@selectedBook"
          ReadData="@OnReadData"
          TotalItems="@PaginationResult.Total"
          PageSize="@Pagination.PageSize"
          ShowPager
          Editable
          CommandMode="DataGridCommandMode.ButtonRow"
          EditMode="DataGridEditMode.Popup"
          Responsive>
    <DataGridColumns>
        <DataGridCommandColumn TItem="BookDto" />
        <DataGridColumn TItem="BookDto" Field="@nameof(BookDto.Id)" Caption="#" Sortable="false" />
        <DataGridColumn TItem="BookDto" Field="@nameof(BookDto.Name)" Caption="Name" Editable="true">
            <EditTemplate>
                <TextEdit Placeholder="Enter name" />
            </EditTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="BookDto" Field="@nameof(BookDto.Author)" Caption="Author" Editable="true"></DataGridColumn>
    </DataGridColumns>
    <ButtonRowTemplate>
        <Button Color="Color.Success" Clicked="context.NewCommand.Clicked">New</Button>
        <Button Color="Color.Primary" Disabled="(selectedBook is null)" Clicked="context.EditCommand.Clicked">Edit</Button>
        <Button Color="Color.Danger" Disabled="(selectedBook is null)" Clicked="@OnClickDelete(context.DeleteCommand)">Delete</Button>
    </ButtonRowTemplate>
    <EmptyTemplate>
        <div class="box">
            No books were found!
        </div>
    </EmptyTemplate>
</DataGrid>

@if (selectedBook != null)
{
    <RichTextEdit @ref="richTextEditRef"
              Theme="RichTextEditTheme.Snow"
              ContentChanged="@OnContentChanged"
              PlaceHolder="Type your post here..."
              ReadOnly="@readOnly"
              SubmitOnEnter="false"
              EnterPressed="@OnSave"
              ToolbarPosition="Placement.Bottom">
        <Editor>My example content</Editor>
        <Toolbar>
            <RichTextEditToolbarGroup>
                <RichTextEditToolbarButton Action="RichTextEditAction.Bold" />
                <RichTextEditToolbarButton Action="RichTextEditAction.Italic" />
                <RichTextEditToolbarSelect Action="RichTextEditAction.Size">
                    <RichTextEditToolbarSelectItem Value="small" />
                    <RichTextEditToolbarSelectItem Selected="true" />
                    <RichTextEditToolbarSelectItem Value="large" />
                    <RichTextEditToolbarSelectItem Value="huge">Very Big</RichTextEditToolbarSelectItem>
                </RichTextEditToolbarSelect>
                <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="ordered" />
                <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="bullet" />
            </RichTextEditToolbarGroup>
            <!-- Custom toolbar content -->
        <RichTextEditToolbarGroup Float="Float.End">
                <Button onClick="window.open('https://www.quilljs.com/','quilljs')"><Icon Name="IconName.InfoCircle" /></Button>
                <Button Clicked="@OnSave"><Icon Name="IconName.Save" /></Button>
            </RichTextEditToolbarGroup>
        </Toolbar>
    </RichTextEdit>
}

@code {

    #region services

    [Inject]
    public BookService serviceBook { get; set; }
    [Inject]
    public GenreService serviceGenre { get; set; }

    #endregion services

    #region data

    public List<GenreDto> genres { get; set; } = new();
    private BookDto? selectedBook { get; set; } = null;

    #endregion data

    #region pagination

    public int GenreIdFilter {
        get => Pagination.IdGenre is null ? 0 : (int)Pagination.IdGenre;
        set => Pagination.IdGenre = value == 0 ? null : value; 
    }

    public string AuthorNameFilter
    {
        get => Pagination.AuthorName is null ? string.Empty : Pagination.AuthorName;
        set => Pagination.AuthorName = value;
    }

    public string TitleFilter
    {
        get => Pagination.Title is null ? string.Empty : Pagination.Title;
        set => Pagination.Title = value;
    }

    private PaginationDto Pagination = new()
        {
            Page = 1,
            PageSize = 10,
            IdGenre = null,
            AuthorName = string.Empty,            
            Title = string.Empty
        };

    private PaginationResultDto PaginationResult = new()
        {
            Total = 0,
            TotalPages = 0,
            Books = new List<BookDto>()
        };
    #endregion pagination

    #region filter

    List<string> multipleSelectioValues = new();
    List<string> multipleSelectionTexts = new();
    private bool multipleAutocompleteFreeTyping = false;

    #endregion filter

    #region edit

    protected RichTextEdit richTextEditRef;
    protected bool readOnly;
    protected string contentAsHtml;
    protected string contentAsDeltaJson;
    protected string contentAsText;
    protected string savedContent;

    #endregion edit

    protected override async Task OnInitializedAsync()
    {
        await GetBookPaginate();
        genres = serviceGenre.GetGenres();
        await base.OnInitializedAsync();
    }

    #region paginationMethod

    private async Task GetBookPaginate()
    {
        var result = await serviceBook.GetPaginateBooksAsync(Pagination);
        if(result != null)
        {
            PaginationResult = result;
        }
    }

    #endregion paginationMethod

    private EventCallback OnClickDelete(DeleteCommandContext<BookDto> command)
    {
        return command.Clicked;
    }

    private async Task OnReadData(DataGridReadDataEventArgs<BookDto> e)
    {
       /* if (!e.CancellationToken.IsCancellationRequested)
        {
            List<BookDto> response = null;

            // this can be call to anything, in this case we're calling a fictional api
            //var response = await Http.GetJsonAsync<Employee[]>( $"some-api/employees?page={e.Page}&pageSize={e.PageSize}" );
            if (e.ReadDataMode is DataGridReadDataMode.Paging)
                //response = (await EmployeeData.GetDataAsync()).Skip( ( e.Page - 1 ) * e.PageSize ).Take( e.PageSize ).ToList();
                response = serviceBook.GetBooks();
            else
                throw new Exception("Unhandled ReadDataMode");

            if (!e.CancellationToken.IsCancellationRequested)
            {
                Total = response.Count;
                books = new List<BookDto>(response);
            }
        }*/
    }

    #region methodEdit

    public async Task OnContentChanged()
    {
        contentAsHtml = await richTextEditRef.GetHtmlAsync();
        contentAsDeltaJson = await richTextEditRef.GetDeltaAsync();
        contentAsText = await richTextEditRef.GetTextAsync();
    }

    public async Task OnSave()
    {
        savedContent = await richTextEditRef.GetHtmlAsync();
        await richTextEditRef.ClearAsync();
    }

    #endregion methodEdit
}