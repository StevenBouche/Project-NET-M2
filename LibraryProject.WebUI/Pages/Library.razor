@page "/library"
@using Blazorise.DataGrid
@using LibraryProject.Business.Dto.Books
@using LibraryProject.Business.Dto.Genres
@using LibraryProject.WebUI.Services
@using Blazorise.RichTextEdit
@using LibraryProject.WebUI.Models
@using System.ComponentModel.DataAnnotations
@using Blazorise.Snackbar

<PageProgress Visible="@LoadingTable" Color="Color.Primary"/>

<h3>Library Dashboard</h3>

<div class="row">
    <!-- List -->
    <div class="row col-md-12">
        <Fields>
            <!-- Name Filter -->
            <div class="col-md-3">
                <Field>
                    <FieldLabel><Heading Size="HeadingSize.Is6">Book title</Heading></FieldLabel>
                    <FieldBody>
                        <TextEdit Text="@Pagination.Title" TextChanged="@OnTitleChanged" Placeholder="Title filter"></TextEdit>
                    </FieldBody>
                </Field>
            </div>
            <!-- Author name filter Filter -->
            <div class="col-md-3">
                <Field>
                    <FieldLabel><Heading Size="HeadingSize.Is6">Author name</Heading></FieldLabel>
                    <FieldBody>
                        <TextEdit Text="@Pagination.AuthorName" TextChanged="@OnAuthorNameChanged" Placeholder="Author name filter"></TextEdit>
                    </FieldBody>
                </Field>
            </div>
            <!-- Genre multiple selector -->
            <div class="col-md-3">
                <Field>
                    <FieldLabel><Heading Size="HeadingSize.Is6">Genre</Heading></FieldLabel>
                    <FieldBody>
                        <Select TValue="int?" SelectedValue="@Pagination.IdGenre" SelectedValueChanged="@OnIdGenreChanged">
                            <SelectItem Value="0">All</SelectItem>
                            @foreach (var item in Genres)
                            {
                                <SelectItem Value="@item.Id">@item.Name</SelectItem>
                            }
                        </Select>
                    </FieldBody>
                </Field>
            </div>
            <div class="col-md-3">
                <Field>
                    <FieldLabel><Heading Size="HeadingSize.Is6">Page size</Heading></FieldLabel>
                    <FieldBody>
                        <Select TValue="int" SelectedValue="@Pagination.PageSize" SelectedValueChanged="@OnPageSizeChanged">
                            @foreach (var item in PageSizeValues)
                            {
                                <SelectItem Value="@item">@item</SelectItem>
                            }
                        </Select>
                    </FieldBody>
                </Field>
            </div>
        </Fields>
        <div class="col-md-12">
            <!-- Table -->
            <DataGrid TItem="BookDto"
                      Data="@PaginationResult.Books"
                      SelectedRow="@SelectedBook"
                      SelectedRowChanged="OnSelectedRowChanged"
                      ReadData="@OnReadData"
                      TotalItems="@PaginationResult.Total"
                      PageSize="@Pagination.PageSize"
                      ShowPager
                      Editable
                      CommandMode="DataGridCommandMode.ButtonRow"
                      EditMode="DataGridEditMode.Form"
                      Hoverable
                      PagerPosition="DataGridPagerPosition.Top"
                      FixedHeader="true"
                      FixedHeaderDataGridHeight="auto"
                      FixedHeaderDataGridMaxHeight="400px"
                      Responsive>
                <DataGridColumns>
                    <DataGridCommandColumn TItem="BookDto" />
                    <DataGridColumn TItem="BookDto" Field="@nameof(BookDto.Id)" Caption="#" Editable="false" Sortable="true" />
                    <DataGridColumn TItem="BookDto" Field="@nameof(BookDto.Name)" Caption="Title" Editable="false" Sortable="true" />
                    <DataGridColumn TItem="BookDto" Field="@nameof(BookDto.Author)" Caption="Author" Editable="false" Sortable="true"/>
                    <DataGridColumn TItem="BookDto" Field="@nameof(BookDto.Price)" Caption="Price" Editable="false" Sortable="true"/>                 
                    <DataGridColumn TItem="BookDto" Field="@nameof(BookDto.Genres)" Caption="Genres" Editable="false" Sortable="false">
                        <DisplayTemplate>
                            @{
                                var item = (context as BookDto);

                                foreach (var genre in item.Genres)
                                {
                                    <Badge Color="Color.Primary">@genre.Name</Badge>
                                }
                            }
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn TItem="BookDto" Field="@nameof(BookDto.CreatedAt)" Caption="CreatedAt" Editable="false" Sortable="true"/>
                    <DataGridColumn TItem="BookDto" Field="@nameof(BookDto.UpdatedAt)" Caption="UpdatedAt" Editable="false" Sortable="true"/>
                </DataGridColumns>
                <ButtonRowTemplate>
                    <Button Color="Color.Success" Clicked="@(_=>OnClickNew())"><Icon Name="IconName.Add"/> New</Button>
                    <Button Color="Color.Primary" Disabled="(SelectedBook is null)" Clicked="@(_=>OnClickEdit())"><Icon Name="IconName.Edit"/> Edit</Button>
                    <Button Color="Color.Danger" Disabled="(SelectedBook is null)" Clicked="@(_=>OnClickDelete())"><Icon Name="IconName.Delete"/> Delete</Button>
                    <Button Color="Color.Primary" Clicked="@(_=>OnClickClearFilter())"><Icon Name="IconName.Clear"/> Clear Filter</Button>
                    <Button Color="Color.Primary" Clicked="@(_=>OnClickRefresh())"><Icon Name="IconName.Sync"/> Refresh</Button>
                </ButtonRowTemplate>
                <EmptyTemplate>
                    <div class="box">
                        No books were found!
                    </div>
                </EmptyTemplate>
            </DataGrid>
        </div>
    </div>
    <div class="col-md-12 mt-3">
        <Field>
                <FieldLabel><h4>Book Content</h4></FieldLabel>
                <FieldBody>
                    <RichTextEdit @ref="richTextEditRef"
                                  Theme="RichTextEditTheme.Snow"
                                  PlaceHolder="Type your post here..."
                                  ReadOnly="true"
                                  SubmitOnEnter="false"
                                  ToolbarPosition="Placement.Top">
                        <Editor>
                            No Book selected
                        </Editor>
                    </RichTextEdit>
                </FieldBody>
            </Field>
    </div>
</div>

<Modal @ref="modalRef" Closing="@OnModalClosing">
    <ModalContent Centered="true" Size="ModalSize.ExtraLarge">
        <ModalHeader>
            <ModalTitle>Create Book</ModalTitle>
        </ModalHeader>
        <ModalBody>
            <Validations @ref="ModalValidations" Mode="ValidationMode.Auto" Model="@BookForm" StatusChanged="@OnStatusChanged">
            <Fields class="row">
                <!-- Name Filter -->
                <div class="col-md-6">
                    <Validation>
                    <Field>
                        <FieldLabel>Book title :</FieldLabel>
                        <FieldBody>
                            <TextEdit Placeholder="Enter Title" @bind-Text="@BookForm.Name">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                    </Validation>
                </div>
                <!-- Author name filter Filter -->
                <div class="col-md-6">
                    <Validation>
                    <Field>
                        <FieldLabel>Author name :</FieldLabel>
                        <FieldBody>
                            <TextEdit Placeholder="Enter Author name" @bind-Text="@BookForm.Author">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                    </Validation>
                </div>
                <div class="col-md-6">
                    <Validation>
                    <Field>
                        <FieldLabel>Price :</FieldLabel>
                        <FieldBody>
                            <NumericEdit TValue="double" @bind-Value="@BookForm.Price">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </NumericEdit>
                        </FieldBody>
                    </Field>
                    </Validation>
                </div>
                <div class="col-md-6">
                    <Field>
                        <FieldLabel>Genre :</FieldLabel>
                        <FieldBody>
                            @foreach (var item in BookForm.Genres)
                            {
                                <Badge Color="Color.Primary" CloseClicked="@(_ => OnRemoveGenreModal(item))">@item.Name</Badge>
                            }
                            <Dropdown>
                                <DropdownToggle Color="Color.Primary">
                                    Select Genre
                                </DropdownToggle>
                                <DropdownMenu MaxMenuHeight="150px">
                                    @{
                                        @foreach (var genredd in Genres)
                                        {
                                            <div class="px-2">
                                                <Check TValue="bool"
                                               Checked="@BookForm.Genres.Any(g => g.Id == genredd.Id)"
                                               CheckedChanged="@(_=> OnSelectGenreModal(genredd))">
                                                    @genredd.Name
                                                </Check>
                                            </div>
                                            <DropdownDivider />
                                        }
                                    }
                                </DropdownMenu>
                            </Dropdown>
                        </FieldBody>
                    </Field>
                </div>
                <div class="col-md-12">
                    <Field>
                        <FieldLabel>Content :</FieldLabel>
                        @{
                            var styleValid = InvalidContent ? "display: block !important;" : "display: none !important;";
                            <div class="invalid-feedback" style="@styleValid">Content must not be empty.</div>
                        }
                        <FieldBody>
                            <RichTextEdit @ref="richTextEditRefModal"
                                          Theme="RichTextEditTheme.Snow"
                                          PlaceHolder="Type your post here..."
                                          ReadOnly="false"
                                          SubmitOnEnter="false"
                                          ToolbarPosition="Placement.Top">
                                <Editor></Editor>
                            </RichTextEdit>
                        </FieldBody>
                    </Field>
                </div>
            </Fields>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@TryCloseModal" Disabled="@SaveDisabled">Save</Button>
            <Button Color="Color.Danger" Clicked="@CloseModal">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {

    //Services

    [Inject]
    public BookService ServiceBook { get; set; }
    [Inject]
    public GenreService ServiceGenre { get; set; }
    [Inject]
    public SnackBarService ServiceSnack { get; set; }

    // Data

    public List<GenreDto> Genres { get; set; } = new();
    private BookDto? SelectedBook { get; set; } = null;
    private BookDetailsDto? SelectedDetailsBook { get; set; } = null;


    // Pagination

    private List<int> PageSizeValues = new() { 2, 5, 10, 20, 50 };
    private PaginationDto Pagination = new()
        {
            Page = 1,
            PageSize = 10,
            IdGenre = 0,
            AuthorName = string.Empty,
            Title = string.Empty,
            OrderBy = string.Empty
        };
    private PaginationResultDto PaginationResult = new()
        {
            Total = 0,
            TotalPages = 0,
            Books = new List<BookDto>()
        };

    // Create and Edit

    private BookForm BookForm { get; set; } = new();
    protected RichTextEdit richTextEditRef;
    protected RichTextEdit richTextEditRefModal;

    //Modal
    private bool SaveDisabled = true;
    private bool InvalidContent = true;
    private Modal modalRef;
    private bool cancelClose;
    Validations ModalValidations;

    private bool LoadingTable = false;

    protected override async Task OnInitializedAsync()
    {
        await GetBookPaginate();
        Genres = await ServiceGenre.GetGenresAsync() ?? new List<GenreDto>();
        await base.OnInitializedAsync();
    }

    async Task OnSelectedRowChanged(BookDto? item)
    {
        if (item == null)
        {
            SelectedBook = null;
            SelectedDetailsBook = null;
            return;
        }

        SelectedBook = SelectedBook != null && SelectedBook.Id == item.Id ? null : item;
        SelectedDetailsBook = SelectedBook == null ? null : await ServiceBook.GetBookDetailsById(SelectedBook.Id);
        if (SelectedDetailsBook != null)
        {
            await richTextEditRef.SetTextAsync(SelectedDetailsBook.Content).AsTask();
        }
        else await richTextEditRef.SetTextAsync("No Book selected").AsTask();
    }

    // ******************
    // Pagination Method
    // ******************

    Task OnPageSizeChanged(int value)
    {
        Pagination.PageSize = value;
        return GetBookPaginate();
    }

    Task OnTitleChanged(string value)
    {
        Pagination.Title = value;
        return GetBookPaginate();
    }

    Task OnAuthorNameChanged(string value)
    {
        Pagination.AuthorName = value;
        return GetBookPaginate();
    }

    Task OnIdGenreChanged(int? value)
    {
        Pagination.IdGenre = value;
        return GetBookPaginate();
    }

    private async Task GetBookPaginate()
    {
        LoadingTable = true;
        var result = await ServiceBook.GetPaginateBooksAsync(Pagination);
        if (result != null)
        {
            PaginationResult = result;
            if (SelectedBook != null)
            {
                await OnSelectedRowChanged(result.Books.SingleOrDefault(b => b.Id == SelectedBook.Id));
            }
        }
        LoadingTable = false;
    }

    private async Task OnReadData(DataGridReadDataEventArgs<BookDto> e)
    {

        if (!e.CancellationToken.IsCancellationRequested/* &&
    e.ReadDataMode is DataGridReadDataMode.Paging*/)
        {
            var sort = GetSortQueryString(e.Columns);
            if(Pagination.Page != e.Page || Pagination.OrderBy != sort)
            {
                Pagination.OrderBy = sort;
                Pagination.Page = e.Page;
                await GetBookPaginate();
            }
        }
    }

    public string GetSortQueryString(IEnumerable<DataGridColumnInfo> sortables)
    {
        if (sortables.Count() is 0) return "";

        var sortList = new List<string>();
        foreach (var sortable in sortables)
        {
            if(sortable.SortDirection != SortDirection.None)
            {
                var direction = sortable.SortDirection == SortDirection.Descending ? " desc" : null;
                sortList.Add($"{sortable.Field}{direction}");
            }
        }
        return string.Join(",", sortList);
    }

    // ******************
    // Action command
    // ******************

    private async Task OnClickClearFilter()
    {
        Pagination = new()
        {
            Page = 1,
            PageSize = 10,
            IdGenre = 0,
            AuthorName = string.Empty,
            Title = string.Empty
        };
        await GetBookPaginate();
    }

    private async Task OnClickRefresh()
    {
        await GetBookPaginate();
    }

    private async Task OnClickNew()
    {
        BookForm = new();
        await richTextEditRefModal.SetTextAsync(string.Empty).AsTask();
        await ShowModal();
    }

    private async void OnClickEdit()
    {
        if (SelectedDetailsBook == null)
            return;

        await richTextEditRefModal.SetTextAsync(SelectedDetailsBook.Content).AsTask();

        BookForm = new()
            {
                IdBook = SelectedDetailsBook.Id,
                Name = SelectedDetailsBook.Name,
                Author = SelectedDetailsBook.Author,
                Price = SelectedDetailsBook.Price,
                Genres = SelectedDetailsBook.Genres
            };

        await ShowModal();
    }

    private async Task OnClickDelete()
    {
        if (SelectedDetailsBook == null)
            return;

        await ServiceBook.DeleteBook(SelectedDetailsBook.Id);
        await GetBookPaginate();
    }

    // ******************
    // Modal
    // ******************

    private Task ShowModal()
    {
        InvalidContent = false;
        SaveDisabled = true;
        ModalValidations.ClearAll();
        return modalRef.Show();
    }

    private Task CloseModal()
    {
        cancelClose = false;
        return modalRef.Hide();
    }

    Task OnStatusChanged(ValidationsStatusChangedEventArgs eventArgs )
    {
        SaveDisabled = eventArgs.Status != ValidationStatus.Success;
        return Task.CompletedTask;
    }

    private async Task TryCloseModal()
    {
        //cancelClose = true;
        BookForm.Content = await richTextEditRefModal.GetTextAsync().AsTask();

        InvalidContent = string.IsNullOrWhiteSpace(BookForm.Content);

        if (InvalidContent)
        {
            return;
        }

        if (BookForm.IdBook != null)
        {
            var result = await ServiceBook.UpdateBook(BookForm);
            if (result != null)
                await ServiceSnack.SnackbarStack.PushAsync("Update book successful", SnackbarColor.Success, options => { options.IntervalBeforeClose = 2000; });
            else return;
        }
        else
        {
            var result = await ServiceBook.CreateBook(BookForm);
            if(result != null)
                await ServiceSnack.SnackbarStack.PushAsync("Create book successful", SnackbarColor.Success, options => { options.IntervalBeforeClose = 2000; });
            else return;
        }

        await GetBookPaginate();
        await modalRef.Hide();
    }

    private Task OnModalClosing(ModalClosingEventArgs e)
    {
        // just set Cancel to prevent modal from closing
        e.Cancel = cancelClose
            || e.CloseReason != CloseReason.UserClosing;

        return Task.CompletedTask;
    }

    private void OnSelectGenreModal(GenreDto genre)
    {
        if (BookForm.Genres.Any(g => g.Id == genre.Id))
        {
            BookForm.Genres.Remove(BookForm.Genres.First(g => g.Id == genre.Id));
        }
        else BookForm.Genres.Add(genre);
    }

    private void OnRemoveGenreModal(GenreDto genre)
    {
        BookForm.Genres.Remove(genre);
    }
}